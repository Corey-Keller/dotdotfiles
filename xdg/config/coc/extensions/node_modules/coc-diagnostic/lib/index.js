"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var coc_nvim_1 = require("coc.nvim");
var config_1 = require("./config");
function activate(context) {
    var config = coc_nvim_1.workspace.getConfiguration('diagnostic-languageserver');
    var isEnable = config.get('enable', true);
    // extension is disable
    if (!isEnable) {
        return;
    }
    var filetypes = config.get('filetypes', {});
    var formatFiletypes = config.get('formatFiletypes', {});
    var documentSelector = Object.keys(tslib_1.__assign({}, filetypes, formatFiletypes));
    // no file types enable
    if (documentSelector.length === 0) {
        return;
    }
    var linters = config.get('linters', {});
    var formatters = config.get('formatters', {});
    var isEnableDebug = config.get('debug', false);
    // The server is implemented in node
    var serverModule = require.resolve('diagnostic-languageserver');
    // If the extension is launched in debug mode then the debug server options are used
    // Otherwise the run options are used
    var serverOptions = {
        run: {
            module: serverModule,
            transport: coc_nvim_1.TransportKind.ipc
        },
        debug: {
            module: serverModule,
            transport: coc_nvim_1.TransportKind.ipc
        }
    };
    // The debug options for the server
    if (isEnableDebug) {
        serverOptions.debug.options = {
            execArgv: [
                "--nolazy",
                "--debug=6009"
            ]
        };
    }
    // Options to control the language client
    var clientOptions = {
        // Register the server for Angular templates
        documentSelector: documentSelector,
        initializationOptions: {
            linters: tslib_1.__assign({}, config_1.linters, linters),
            filetypes: filetypes,
            formatters: tslib_1.__assign({}, config_1.formatters, formatters),
            formatFiletypes: formatFiletypes
        }
    };
    // Create the language client and start the client.
    var client = new coc_nvim_1.LanguageClient('diagnostic-languageserver', 'diagnostic language service', serverOptions, clientOptions);
    // Push the disposable to the context's subscriptions so that the
    // client can be deactivated on extension deactivation
    context.subscriptions.push(coc_nvim_1.services.registLanguageClient(client));
}
exports.activate = activate;
//# sourceMappingURL=index.js.map